{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red227\green136\blue109;
\red202\green202\blue202;\red97\green170\blue209;\red212\green212\blue212;\red75\green91\blue103;\red75\green91\blue103;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c91765\c60784\c50196;
\cssrgb\c83137\c83137\c83137;\cssrgb\c44706\c72549\c85490;\cssrgb\c86275\c86275\c86275;\cssrgb\c36471\c43137\c47843;\cssrgb\c36471\c43137\c47843;
}
\margl1440\margr1440\vieww10540\viewh14860\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs36 \cf0 String methods\
\

\fs28 string.substring(startIndex, endIndex)
\f1\b0  \'97returns a specified amount of characters from within a string\
\
string.toUpper() \'97makes the string all upper case.\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 const\strokec5  names \strokec4 =\strokec5  [\strokec6 "alice"\strokec7 ,\strokec5  \strokec6 "bob"\strokec7 ,\strokec5  \strokec6 "charlie"\strokec7 ,\strokec5  \strokec6 "danielle"\strokec5 ]\
\
const letters = names.map(x => x.substring(0, 1).toUpperCase()) \
	\'97letters is now an array of upper case Chars\
	\'97map method returns a new array with results of calling a provided function on every 	element in the calling array.\
	\'97\'93=>\'94 is the new shorthand \'93arrow\'94 function declaration. param => return
\fs26 \cb1 \
\
\
\pard\pardeftab720\sl400\partightenfactor0

\fs28 \cf2 \cb3 \strokec8 Challenge 3:\strokec5 \

\f0\b \strokec8 Given an array of strings, return an array of strings that wraps each\strokec5 \
\strokec8 of the original strings in an HTML-like <p></p> tag.
\f1\b0 \strokec5 \
\
\strokec8 E.g. given: ["Bulbasaur", "Charmander", "Squirtle"]\strokec5 \
\strokec8 return: ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]\strokec5 \
\
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \strokec4 const\strokec5  pokemon \strokec4 =\strokec5  [\strokec6 "Bulbasaur"\strokec7 ,\strokec5  \strokec6 "Charmander"\strokec7 ,\strokec5  \strokec6 "Squirtle"\strokec5 ]\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \strokec8 // -->          ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]\cf5 \cb1 \strokec5 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf2 \cb3 \strokec4 const\strokec5  pPokemon \strokec4 =\strokec5  pokemon\strokec7 .\strokec5 map(x => \{\
    
\fs26  
\fs28 \strokec4 return\strokec5  x \strokec4 =\strokec5  \strokec6 `<p>\strokec7 $\{\strokec5 x\strokec7 \}\strokec6 </p>` 	// I used a template literal ` ` to make a new string\strokec5 \
\})\
console.log(pPokemon) \
	-result is \cf2 \cb3 \outl0\strokewidth0 ["<p>Bulbasaur</p>", "<p>Charmander</p>", "<p>Squirtle</p>"]
\fs26 \cf2 \cb1 \outl0\strokewidth0 \strokec5 \
}